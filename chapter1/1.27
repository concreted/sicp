(define (runtime) (tms:clock (times)))

(define (expmod base exp m)
	(cond ((= exp 0) 1)
	      ((even? exp)
	       (remainder (square (expmod base (/ exp 2) m)) m))
	      (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
	(define (try-it a)
		(= (expmod a n n) a))
	(try-it (+ 1 (random (- n 1)))))

(define (congruent? a n)
	(= (expmod a n n) a))

(define (fast-prime? n times)
	(cond ((= times 0) #t)
	      ((fermat-test n) (fast-prime? n (- times 1)))
	      (else #f)))

(define (square n)
	(* n n))

(define (smallest-divisor n)
	(find-divisor n 2))

(define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
	      ((divides? test-divisor n) test-divisor)
	      (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
	(= (remainder b a) 0))

(define (prime? n)
	;(= n (smallest-divisor n))
	(fast-prime? n 1000))

(define (timed-prime-test n)
	;(newline)
	;(display n)
	(start-prime-test n (runtime)))

(define (start-prime-test n start-time)
	(if (prime? n)
	    (report-prime n (- (runtime) start-time))))

(define (report-prime n elapsed-time)
	(newline)
	(display n)
	(display " *** ")
	(display elapsed-time))

(define (search-for-primes start end)
	(cond ((< start end) 
	    (timed-prime-test start)
	    (cond ((even? start) (search-for-primes (+ start 1) end))
	    	  (else (search-for-primes (+ start 2) end))))))

(define (check-congruent a n)
	(cond ((= a n) #t)
      	      ((not (congruent? a n)) #f)	
	      (else (check-congruent (+ a 1) n))))

(display "7:")
(display (check-congruent 1 7))
(newline)
(display "9:")
(display (check-congruent 1 9))
(newline)

(display "561:")
(display (check-congruent 1 561))
(newline)
(display "1105:")
(display (check-congruent 1 1105))
(newline)
(display "1729:")
(display (check-congruent 1 1729))
(newline)
(display "2465:")
(display (check-congruent 1 2465))
(newline)
(display "2821:")
(display (check-congruent 1 2821))
(newline)
(display "6601:")
(display (check-congruent 1 6601))
(newline)