(define (assert-equal a b)
	(cond ((= a b)
	       (display "PASS:    ")
	       (display a) (display "==") (display b)
	       (newline))
	      (else 
	      	    (display "FAIL:    ")
		    (display a) (display "!=") (display b)
		    (newline))))

(define (product term a next b)
	(if (> a b)
	    1
	    (* (term a) (product term (next a) next b))))

(define (product-iter term a next b)
	(define (iter a result)
		(if (> a b)
		    result
		    (iter (next a) (* result (term a)))))
	(iter a 1))

(define (identity n)
	n)

(define (inc n)
	(+ n 1))

(define (factorial n)
	(product-iter identity 1 inc n))

(define (approx-pi n)
	(define (numerator i)
		(cond ((= 1 i) 2)
		      ((even? i) (+ 2 i))
		      ((odd? i) (+ 2 (- i 1)))))
	(define (denominator i)
		(if (odd? i)
		    (+ 2 i)
		    (+ 2 (- i 1))))
	(* 4 (exact->inexact(/ (product-iter numerator 1 inc n) (product-iter denominator 1 inc n)))))

(assert-equal (factorial 4) (* 4 3 2 1))
(assert-equal (factorial 10) (* 10 9 8 7 6 5 4 3 2 1))

(display (approx-pi 10))
(newline)
(display (approx-pi 100))
(newline)
(display (approx-pi 975))
(newline)