(define (average x y)
	(/ (+ x y) 2))

(define (square x)
	(* x x))

;(define (test f)
;	(define (g i) (f i))
;	g)

;(define (yes guess) (< 6 guess))

(define (iterative-improve good-enough? improve)
	(define (f guess)
		(if (good-enough? guess)
		    (improve guess)
		    (f (improve guess))))
	f)

(define (sqrt-iter x)
	(define (goodenough guess) 
		(< (abs (- (square guess) x)) 0.00000000000000001))
	(define (improve guess)
		(average guess (/ x guess)))
	((iterative-improve goodenough improve) 1.0))

(define (fixed-point f first-guess)
	(define tolerance 0.00001)
	(define (improve guess)
		(f guess))
	(define (close-enough? guess)
		(< (abs (- guess (improve guess))) tolerance))
	((iterative-improve close-enough? improve) first-guess))

(define (fixed-point-old f first-guess)
	(define tolerance 0.00001)
	(define (close-enough? v1 v2)
		(< (abs (- v1 v2)) tolerance))
	(define (try guess)
		(let ((next (f guess)))
		     (if (close-enough? guess next)
		     	 next
			 (try next))))
	(try first-guess))

;Testing to make sure certain things work...
;(display ((test square) 2))
;(newline)
;(display ((iterative-improve yes square) 2))
;(newline)

;Here's the good stuff
(display (sqrt-iter 256))
(newline)

(display (fixed-point cos 1.0))
(newline)

(display (fixed-point-old cos 1.0))
(newline)
