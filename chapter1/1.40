(define (square a)
	(* a a))

(define (average a b)
	(/ (+ a b) 2))

(define (average-damp f)
	(lambda (x) (average x (f x))))

(define tolerance 0.0000000000000001)

(define (fixed-point f first-guess)
	(define (close-enough? v1 v2)
		(< (abs (- v1 v2)) tolerance))
	(define (try guess)
		(let ((next (f guess)))
		     (if (close-enough? guess next)
		     	 next
			 (try next))))
	(try first-guess))

(define (sqrt x)
	(fixed-point (average-damp (lambda (y) (/ x y))) 1.0))

(define (cube-root x)
	(fixed-point (average-damp (lambda (y) (/ x (square y)))) 1.0))

(define dx 0.00001)

(define (deriv g)
	(lambda (x)
		(/ (- (g (+ x dx)) (g x)) dx)))

(define (newton-transform g)
	(lambda (x)
		(- x (/ (g x)) ((deriv g) x))))

(define (newtons-method g guess)
	(fixed-point (newton-transform g) guess))

(define (cubic a b c)
	(lambda (x) (+ (* x x x) (* a (* x x)) (* b x) c)))

(display (newtons-method (cubic 3 2 1) 1))
(newline)

(define (fixed-point-of-transform g transform guess)
	(fixed-point (transform g) guess))

(define a (fixed-point-of-transform (cubic 3 2 1) newton-transform 1.0))
(display a)
(newline)
(display ((cubic 3 2 1) a))
(newline)


;This doesn't work - why?
;(display (fixed-point-of-transform (cubic 1 1 1) average-damp 0.5))
;(newline)
