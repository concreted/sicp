(define (runtime) (tms:clock (times)))

(define (expmod base exp m)
	(define (test x n)
		(if (or (= x 1) (= x (- n 1))) x)
		(if (= (remainder (square x) n) 1) 0)
		x)
	(cond ((= exp 0) 1)
	      ((even? exp) 
	      	      (remainder (square (test (expmod base (/ exp 2) m) exp)) m))
	      (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
	(define (try-it a)
		(= (expmod a (- n 1) n) 1))
	(try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
	(cond ((= times 0) #t)
	      ((fermat-test n) (fast-prime? n (- times 1)))
	      (else #f)))

(define (square n)
	(* n n))

(define (smallest-divisor n)
	(find-divisor n 2))

(define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
	      ((divides? test-divisor n) test-divisor)
	      (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
	(= (remainder b a) 0))

(define (prime? n)
	;(= n (smallest-divisor n))
	(fast-prime? n 1000))

(define (timed-prime-test n)
	;(newline)
	;(display n)
	(start-prime-test n (runtime)))

(define (start-prime-test n start-time)
	(if (prime? n)
	    (report-prime n (- (runtime) start-time))))

(define (report-prime n elapsed-time)
	(newline)
	(display n)
	(display " *** ")
	(display elapsed-time))

(define (search-for-primes start end)
	(cond ((< start end) 
	    (timed-prime-test start)
	    (cond ((even? start) (search-for-primes (+ start 1) end))
	    	  (else (search-for-primes (+ start 2) end))))))

(define (test-prime n)
	(display n)
	(display ": ")
	(cond ((prime? n) (display "Prime!"))
	      (else (display "Not prime...")))
	(newline))

(test-prime 7)
(test-prime 100)
(test-prime 19)
(test-prime 561)
(test-prime 1105)
(test-prime 1729)
(test-prime 2465)
(test-prime 2821)
(test-prime 6601)
(test-prime 1999)


;(search-for-primes 1000 1020)
;(newline)

;(search-for-primes 1000000 1000038)
;(newline)

;(search-for-primes 10000000 10000104)
;(newline)

;(search-for-primes 100000000 100000040)
;(newline)
 
;(search-for-primes 1000000000 1000000022)
;(newline)

;(search-for-primes 10000000000 10000000062)
;(newline)