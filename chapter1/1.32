(define (accumulate combiner null-value term a next b)
	(if (> a b) 
	    null-value
	    (combiner (term a) (accumulate combiner null-value term (next a) next b))))

(define (accumulate-iter combiner null-value term a next b)
	(define (iter a result)
		(if (> a b)
		    result
		    (iter (next a) (combiner (term a) result))))
	(iter a null-value))

(define (inc n)
	(+ n 1))

(define (cube n)
	(* n n n))

(define (sum term a next b)
	(accumulate-iter + 0 term a next b))

(define (product term a next b)
	(accumulate-iter * 1 term a next b))

(define (sum-cubes a b)
	(sum cube a inc b))	

(define (factorial n)
	(product identity 1 inc n))

(display (sum-cubes 1 10))
(newline)

(display (factorial 10))
(newline)
(display (* 10 9 8 7 6 5 4 3 2 1))
(newline)